# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of Taproot.
#
# Taproot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Taproot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Taproot.  If not, see <https://www.gnu.org/licenses/>.

import platform

MCU_VARIANTS_BY_BOARD = {
    "rm-dev-board-a": "stm32f427iih6",
    "rm-dev-board-c": "stm32f407igh6",
}
HOSTED_TARGET_NAMES_BY_SYSTEM = {
    "Linux": "hosted-linux",
    "Darwin": "hosted-darwin",
    "Windows": "hosted-windows",
}

def init(module):
    module.name = ":modm-project.xml"
    module.description = "project.xml files used to generate modm HALs"

def prepare(module, options):
    return True

def _get_hosted_target_for_current_platform():
    system_type = platform.system()
    try:
        return HOSTED_TARGET_NAMES_BY_SYSTEM[system_type]
    except KeyError:
        raise RuntimeError(f"Unknown host platform {system_type}")

def build(env):
    board_name = env[":dev_board"]
    try:
        mcu = MCU_VARIANTS_BY_BOARD[board_name]
    except KeyError:
        raise RuntimeError(f"Dev board {board_name} is not valid")

    env.substitutions = {
        "modm_path": env[":modm_repo_lb"],
        "mcu": mcu,
        "hosted_target": _get_hosted_target_for_current_platform(),
    }
    env.outbasepath = "taproot"
    env.template("project.xml.in", "project.xml")
    env.template("sim-modm/project.xml.in", "sim-modm/project.xml")
    env.template("sim-modm/.gitignore.in", "sim-modm/.gitignore")
