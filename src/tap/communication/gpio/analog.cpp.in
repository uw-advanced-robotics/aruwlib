/*
 * Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of Taproot.
 *
 * Taproot is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Taproot is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Taproot.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "analog.hpp"

#include "tap/board/board.hpp"
#include "tap/util_macros.hpp"

using namespace Board;

namespace tap
{
namespace gpio
{
void Analog::init()
{
#ifndef PLATFORM_HOSTED
%% if pins|length > 0
    AnalogInPins::setAnalogInput();
%% endif
{% for adc_id in adcs %}
    // Initial ADC/Timer setup
    Adc{{ adc_id }}::connect<{% for pin in adc_to_pin_map[adc_id] %}AnalogInPin{{ pin }}::In{{ pin_to_in[pin] }}{% if not loop.last %}, {% endif %}{% endfor %}>();
    Adc{{ adc_id }}::initialize<SystemClock, 22500000_Bd>();

    %% for pin in adc_to_pin_map[adc_id]
    Adc{{ adc_id }}::setPinChannel<AnalogInPin{{ pin }}>();
    %% endfor
{% endfor %}
#endif
}

uint16_t Analog::read(Pin pin) const
{
%% if pins|length > 0
#ifdef PLATFORM_HOSTED
    UNUSED(pin);
    return 0;
#else
    switch (pin)
    {
    %% for adc_id in adcs
        %% for pin in adc_to_pin_map[adc_id]
        case Pin::{{ pin }}:
            return Adc{{ adc_id }}::readChannel(Adc{{ adc_id }}::getPinChannel<AnalogInPin{{ pin }}>());
        %% endfor
    %% endfor
        default:
            return 0;
    }
#endif
%% else
    UNUSED(pin);
    return 0;
%% endif
}
}  // namespace gpio

}  // namespace tap

