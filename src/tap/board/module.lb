# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of Taproot.
#
# Taproot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Taproot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Taproot.  If not, see <https://www.gnu.org/licenses/>.

import glob
import lxml.etree

def parse_all(device):
    device_file_names = glob.glob(repopath("supported-devices/*.xml"))
    device_file_names = [dfn for dfn in device_file_names if device in dfn]
    assert len(device_file_names) == 1
    # parse the xml-file
    parser = lxml.etree.XMLParser(no_network=True)
    xmlroot = lxml.etree.parse(device_file_names[0], parser=parser)
    xmlroot.xinclude()
    return xmlroot.getroot()

def init(module):
    module.name = ":board"
    module.description = "Project.xml files for modm HAL generation"

def prepare(module, options):    
    module.add_option(
        StringOption(
            name="digital_in_pins",
            description="a comma-seperated list of digital in pins",
            default=""))

    module.add_option(
        StringOption(
            name="digital_out_pins",
            description="a comma-seperated list of digital out pins",
            default=""))

    module.add_option(
        StringOption(
            name="analog_in_pins",
            description="a comma-seperated list of analog in pins",
            default=""))

    module.add_option(
        StringOption(
            name="pwm_pins",
            description="a comma-seperated list of pwm pins",
            default=""))

    return True

def build(env):
    def extractPinDefines(pins: str) -> str:
        pins = [pin.strip() for pin in str.split(pins, ",")]
        if len(pins) == 1 and pins[0] == "":
            pins = []
        return pins

    digitalInPins = extractPinDefines(env["::digital_in_pins"])
    digitalOutPins = extractPinDefines(env["::digital_out_pins"])
    analogInPins = extractPinDefines(env["::analog_in_pins"])
    pwmPins = extractPinDefines(env["::pwm_pins"])

    metadata = parse_all(env[":dev_board"])

    pins = []
    pins.extend(digitalInPins)
    pins.extend(digitalOutPins)
    pins.extend(analogInPins)
    pins.extend(pwmPins)
    assert len(pins) == len(set(pins)), "duplicate pin definitions"

    metadata_pins = metadata.find("gpio-pins")
    for pin in pins:
        found = False
        for metadata_pin in metadata_pins:
            if metadata_pin.get("alias") == pin:
                found = True
        assert found, "invalid pin " + pin

    pinMappings = {}

    for pin in metadata_pins:
        pinMappings[pin.get("alias")] = pin.get("name")

    env.substitutions = {
        "digitalInPins": digitalInPins,
        "digitalOutPins": digitalOutPins,
        "analogInPins": analogInPins,
        "pwmPins": pwmPins,
        "pinMappings": pinMappings,
    }
    env.outbasepath = "taproot/src/tap/board"

    env.copy("board.cpp")
    if env["taproot:dev_board"] == "rm-dev-board-a":
        env.template("rm-dev-board-a/board.hpp.in", "board.hpp")
    elif env["taproot:dev_board"] == "rm-dev-board-c":
        env.template("rm-dev-board-c/board.hpp.in", "board.hpp")
