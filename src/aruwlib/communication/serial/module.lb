# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruwlib.
#
# aruwlib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruwlib is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruwlib.  If not, see <https://www.gnu.org/licenses/>.

class Remote(Module):
    def init(self, module):
        module.name = ":communication:serial:remote"
        module.description = "Remote control communication via DR16 receiver"

    def prepare(self, module, options):
        module.depends(":communication:gpio")
        module.add_option(
            StringOption(name="uart_port",
                         description="Which uart port the remote is connected to."))
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/serial"
        env.substitutions = {"uart_port": env[":communication:serial:remote:uart_port"]}
        env.template("remote.cpp.in", "remote.cpp")
        env.template("remote.hpp.in", "remote.hpp")

class RefSerial(Module):
    def init(self, module):
        module.name = ":communication:serial:ref_serial"
        module.description = "Ref serial communication"

    def prepare(self, module, options):
        module.depends(":communication:gpio")
        module.add_option(
            StringOption(name="uart_port",
                         description="Which uart port the referee system is connected to."))
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/serial"
        env.substitutions = {"uart_port": env[":communication:serial:ref_serial:uart_port"]}
        env.template("ref_serial.cpp.in", "ref_serial.cpp")
        env.template("ref_serial.hpp.in", "ref_serial.hpp")

class TerminalSerial(Module):
    def init(self, module):
        module.name = ":communication:serial:terminal_serial"
        module.description = "Terminal serial communication"

    def prepare(self, module, options):
        module.depends(":communication:gpio")
        module.add_option(
            StringOption(name="uart_port",
                         description="Which uart port the host device that is reading data\
                                      from the UART port is connected to."))
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/serial"
        env.substitutions = {"uart_port": env[":communication:serial:terminal_serial:uart_port"]}
        env.template("uart_terminal_device.hpp.in", "uart_terminal_device.hpp")
        env.copy("uart_terminal_device.cpp")
        env.copy("terminal_serial.hpp")
        env.copy("terminal_serial.cpp")
        env.copy("hosted_terminal_device.hpp")
        env.copy("hosted_terminal_device.cpp")
        
def init(module):
    module.name = ":communication:serial"
    module.description = "Various serial communication interfaces"

def prepare(module, options):
    module.depends("aruwlib:core")

    module.add_submodule(Remote())
    module.add_submodule(RefSerial())
    module.add_submodule(TerminalSerial())

    return True

def build(env):
    env.outbasepath = "aruwlib/src/aruwlib/communication/serial"
    env.template("uart.cpp.in", "uart.cpp")
    env.template("uart.hpp.in", "uart.hpp")
    env.copy("dji_serial.hpp")
    env.copy("dji_serial.cpp")
