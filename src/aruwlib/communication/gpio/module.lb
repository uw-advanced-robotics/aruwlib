# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruwlib.
#
# aruwlib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruwlib is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruwlib.  If not, see <https://www.gnu.org/licenses/>.

class Analog(Module):
    def init(self, module):
        module.name = ":communication:gpio:analog"

    def prepare(self, module, options):
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/gpio"
        env.template("analog.cpp.in", "analog.cpp")
        env.template("analog.hpp.in", "analog.hpp")

class Digital(Module):
    def init(self, module):
        module.name = ":communication:gpio:digital"

    def prepare(self, module, options):
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/gpio"
        env.template("digital.cpp.in", "digital.cpp")
        env.template("digital.hpp.in", "digital.hpp")

class Leds(Module):
    def init(self, module):
        module.name = ":communication:gpio:leds"

    def prepare(self, module, options):
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/gpio"
        env.template("leds.cpp.in", "leds.cpp")
        env.template("leds.hpp.in", "leds.hpp")

class Pwm(Module):
    def init(self, module):
        module.name = ":communication:gpio:pwm"

    def prepare(self, module, options):
        return True

    def build(self, env):
        env.outbasepath = "aruwlib/src/aruwlib/communication/gpio"
        env.template("pwm.cpp.in", "pwm.cpp")
        env.template("pwm.hpp.in", "pwm.hpp")

def init(module):
    module.name = ":communication:gpio"
    module.description = "Various GPIO HAL wrappers"

def prepare(module, options):
    module.depends("aruwlib:core")

    module.add_submodule(Analog())
    module.add_submodule(Digital())
    module.add_submodule(Leds())
    module.add_submodule(Pwm())

    return True

def build(env):
    pass
