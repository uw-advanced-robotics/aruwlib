/*
 * Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
 *
 * This file is part of aruwlib.
 *
 * aruwlib is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * aruwlib is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with aruwlib.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "analog.hpp"

#include "aruwlib/board/board.hpp"

using namespace Board;

namespace aruwlib
{
namespace gpio
{
void Analog::init()
{
#ifndef PLATFORM_HOSTED
%% if pins|length > 0
    AnalogInPins::setAnalogInput();
    %% for adc in adcs
    // Initial ADC/Timer setup
    {{ adc }}::connect<
        AnalogInPinS::In0,
        AnalogInPinT::In1,
        AnalogInPinU::In2,
        AnalogInPinV::In3,
        AnalogInPinOled::In6>();
    {{ adc }}::initialize<SystemClock, 22500000_Bd>();
    %% endfor
    %% for pin in pins
    {{ pinToAdc[pin] }}::setPinChannel<AnalogInPin{{ pin }}>();
    %% endfor
%% endif
#endif
}

uint16_t Analog::read(Pin pin) const
{
#ifdef PLATFORM_HOSTED
    return 0;
#else
    switch (pin)
    {
%% for pin in pins
        case Pin::{{ pin }}:
            return {{ pinToAdc[pin] }}::readChannel(Adc1::getPinChannel<AnalogInPin{{ pin }}>());
%% endfor
        default:
            return 0;
    }
#endif
}
}  // namespace gpio

}  // namespace aruwlib

