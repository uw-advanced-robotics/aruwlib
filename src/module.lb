# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruwlib.
#
# aruwlib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruwlib is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruwlib.  If not, see <https://www.gnu.org/licenses/>.

import os

def init(module):
    module.name = ":core"
    module.description = "Core library features"

def prepare(module, options):
    module.add_option(BooleanOption(
        name="generate_driver_hpp", default=True,
        description="Specify whether or not to generate drivers.hpp.\
                     Set to false after you generate drivers.hpp the first time."))

    module.depends(
        "aruwlib:testing:mock",
        "aruwlib:modm-projectxml",
        "aruwlib:board",
        "aruwlib:communication")

    return True

def build(env):
    env.outbasepath = "aruwlib/src"
    env.copy("aruwlib/SConscript")
    env.copy("aruwlib/drivers_singleton.hpp")
    env.copy("aruwlib/util_macros.hpp")
    env.copy("aruwlib/drivers.hpp")
    env.copy("aruwlib/drivers_singleton.cpp")

    env.copy("aruwlib/algorithms")
    env.copy("aruwlib/architecture")
    env.copy("aruwlib/control")
    env.copy("aruwlib/errors")
    env.copy("aruwlib/motor")

    if (env["generate_driver_hpp"]):
        env.outbasepath = "src"
        env.substitutions = {"with_terminal": env.has_module(":communiaction:serial:terminal_serial")}
        env.template("drivers.hpp.in", "drivers.hpp")
