# Copyright (c) 2020-2021 Advanced Robotics at the University of Washington <robomstr@uw.edu>
#
# This file is part of aruwlib.
#
# aruwlib is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# aruwlib is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with aruwlib.  If not, see <https://www.gnu.org/licenses/>.

def init(module):
    module.name = ":core"
    module.description = "Core library features"

def prepare(module, options):
    module.add_option(BooleanOption(
        name="generate_driver_hpp", default=True,
        description="Specify whether or not to generate drivers.hpp.\
                     Set to false after you generate drivers.hpp the first time."))

    module.depends(
        "aruwlib:testing:mock",
        "aruwlib:modm-project.xml",
        "aruwlib:board",
        "aruwlib:errors")

    # motor-specific dependencies
    module.depends("aruwlib:communication:can", "aruwlib:communication:tcp-server")

    # command mapper dependencies
    module.depends("aruwlib:communication:serial:remote")

    # power limiter dependencies
    module.depends("aruwlib:communication:gpio:analog")
    module.depends("aruwlib:communication:serial:ref_serial")

    # scheduler dependencies
    module.depends("aruwlib:communication:serial:terminal_serial")

    # servo dependencies
    module.depends("aruwlib:communication:gpio:pwm")

    return True

def build(env):
    # Copy all folders and files that are not configurable in this
    # top level module
    env.outbasepath = "aruwlib/src"
    env.copy("aruwlib/SConscript")
    env.copy("aruwlib/drivers_singleton.hpp")
    env.copy("aruwlib/util_macros.hpp")
    env.copy("aruwlib/drivers.hpp")
    env.copy("aruwlib/drivers_singleton.cpp")

    env.copy("aruwlib/algorithms")
    env.copy("aruwlib/architecture")
    env.copy("aruwlib/control")
    env.copy("aruwlib/motor")

    if (env["generate_driver_hpp"]):
        env.outbasepath = "src"
        env.substitutions = {
            "with_terminal": env.has_module(":communication:serial:terminal_serial"),
            "with_refserial": env.has_module(":communication:serial:ref_serial"),
            "with_uart": env.has_module(":communication:serial"),
            "with_remote": env.has_module(":communication:serial:remote"),
            "with_pwm": env.has_module(":communication:gpio:pwm"),
            "with_digital": env.has_module(":communication:gpio:digital"),
            "with_analog": env.has_module(":communication:gpio:analog"),
            "with_leds": env.has_module(":communication:gpio:leds"),
            "with_mpu6500": env.has_module(":communication:sensors:mpu6500"),
            "with_can": env.has_module(":communication:can"),
            "with_imurxlistener": env.has_module(":communication:can:imu_rx_listener")
        }
        env.template("drivers.hpp.in", "drivers.hpp")
